{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","about","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","defaultProps","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.fdd2b36b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function Navbar(props) {\r\n  // const [mod, setCount] = useState(0);\r\n  return (\r\n    <>\r\n      <nav\r\n        className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n      >\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"/\">\r\n            {props.title}\r\n          </a>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">\r\n                  {/* Home */}\r\n                </a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"/\">\r\n                  {props.about}\r\n                </a>\r\n              </li>\r\n            </ul>\r\n            {/* <form className=\"d-flex\">\r\n              <input\r\n                className=\"form-control me-2\"\r\n                type=\"search\"\r\n                placeholder=\"Search\"\r\n                aria-label=\"Search\"\r\n              />\r\n              <button className=\"btn btn-outline-success\" type=\"submit\">\r\n                Search\r\n              </button>\r\n            </form> */}\r\n            <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n              <input\r\n                className=\"form-check-input\"\r\n                type=\"checkbox\"\r\n                id=\"flexSwitchCheckDefault\"\r\n                onClick={props.toggleMode}\r\n              />\r\n              <label\r\n                className=\"form-check-label\"\r\n                htmlFor=\"flexSwitchCheckDefault\"\r\n              >\r\n                Dark Mode\r\n              </label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </>\r\n  );\r\n}\r\n// Navbar.propTypes = {\r\n//   about: PropTypes.string,\r\n//   title: PropTypes.string,\r\n// };\r\nNavbar.propTypes = {\r\n  about: PropTypes.string,\r\n  title: PropTypes.string,\r\n};\r\n\r\nNavbar.defaultProps = { about: \"\", title: \"about\" };\r\n","// import React, { useState } from \"react\";\r\n\r\n// import PropTypes from \"prop-types\";\r\n\r\n// export default function TxtForm(props) {\r\n//   const [text, setText] = useState(\"\");\r\n//   const handleupchanger = () => {\r\n//     // let newtext = text.toUpperCase();\r\n//     setText(text.toUpperCase());\r\n//   };\r\n//   const handleonchange = (event) => {\r\n//     setText(event.target.value);\r\n//   };\r\n//   const handlecopy = (event) => {\r\n//     var text5 = document.getElementById(\"mybox\");\r\n//     text5.select();\r\n//     navigator.clipboard.writeText(text5.value);\r\n//   };\r\n//   const handleextraspaces = (event) => {\r\n//     let newtext = text.split(/[ ]+/);\r\n//     setText(newtext.join(\" \"));\r\n//   };\r\n//   const handlelowchanger = () => {\r\n//     setText(text.toLowerCase());\r\n//   };\r\n//   const handleclear = () => {\r\n//     setText(\"\");\r\n//   };\r\n//   return (\r\n//     // <div style={{ backgroundColor: props.mode === \"dark\" ? \"gray\" : \"white\" }}>\r\n//     <>\r\n//       <div\r\n//         className=\"container\"\r\n//         style={{ backgroundColor: props.mode === \"dark\" ? \"gray\" : \"white\" }}\r\n//       >\r\n//         <h1> {props.heading}</h1>\r\n//         <div className=\"mb-3\">\r\n//           <textarea\r\n//             className=\"form-control\"\r\n//             value={text}\r\n//             onChange={handleonchange}\r\n//             id=\"mybox\"\r\n//             rows=\"11\"\r\n//             style={{\r\n//               backgroundColor: props.mode === \"dark\" ? \"gray\" : \"white\",\r\n//               color: props.mode === \"light\" ? \"gray\" : \"white\",\r\n//               // \"\r\n//             }}\r\n//           ></textarea>\r\n//         </div>\r\n\r\n//         <button\r\n//           type=\"button\"\r\n//           onClick={handleupchanger}\r\n//           className=\"btn btn-primary\"\r\n//         >\r\n//           Convert to upperCase\r\n//         </button>\r\n\r\n//         <button\r\n//           type=\"button\"\r\n//           onClick={handlelowchanger}\r\n//           className=\"btn btn-primary mx-3\"\r\n//           // className=\"mb-3\"\r\n//         >\r\n//           Convert to LowerCase\r\n//         </button>\r\n//         {/* <br /> */}\r\n//         <button\r\n//           type=\"button\"\r\n//           onClick={handleclear}\r\n//           className=\"btn btn-primary my-2\"\r\n//           // className=\"mb-3\"\r\n//         >\r\n//           Clear\r\n//         </button>\r\n\r\n//         <button\r\n//           type=\"button\"\r\n//           onClick={handlecopy}\r\n//           className=\"btn btn-primary mx-3\"\r\n//           // className=\"mb-3\"\r\n//         >\r\n//           Copy\r\n//         </button>\r\n//         <button\r\n//           type=\"button\"\r\n//           onClick={handleextraspaces}\r\n//           className=\"btn btn-primary mx-3\"\r\n//           // className=\"mb-3\"\r\n//         >\r\n//           Remove Extra Spaces\r\n//         </button>\r\n//       </div>\r\n//       <div\r\n//         className=\"container\"\r\n//         // style={{\r\n//         //   backgroundColor: props.mode === \"dark\" ? \"gray\" : \"white\",\r\n//         // }}\r\n//       >\r\n//         <h1>Summary</h1>\r\n//         <p>\r\n//           {/* {text.split(\" \").length} words and {text.length} chracter */}\r\n//           {text.split(\" \").length} words and {text.length} chracter\r\n//         </p>\r\n//         <h1>Preview</h1>\r\n//         <p>{text}</p>\r\n//       </div>\r\n//     </>\r\n//     // </div>\r\n//   );\r\n// }\r\n\r\nimport React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const handleUpClick = () => {\r\n    // console.log(\"Uppercase was clicked: \" +  text);\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to Uppercase\", \"success\");\r\n  };\r\n\r\n  const handleLoClick = () => {\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to Lowercase\", \"success\");\r\n  };\r\n\r\n  const handleClearClick = () => {\r\n    let newText = \"\";\r\n    setText(newText);\r\n    props.showAlert(\"Text cleared\", \"danger\");\r\n  };\r\n\r\n  const handleOnChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const handleCopy = () => {\r\n    var text = document.getElementById(\"myBox\");\r\n    text.select();\r\n\r\n    navigator.clipboard.writeText(text.value);\r\n    props.showAlert(\"Copied to clipbord\", \"success\");\r\n  };\r\n\r\n  const handleExtraSpaces = () => {\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\"Space removed\", \"success\");\r\n  };\r\n\r\n  const [text, setText] = useState(\"\");\r\n  // text = \"new text\"; // Wrong way to change the state\r\n  // setText(\"new text\"); // Correct way to change the state\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"#042743\" }}\r\n      >\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            value={text}\r\n            onChange={handleOnChange}\r\n            style={{\r\n              backgroundColor: props.mode === \"dark\" ? \"grey\" : \"white\",\r\n              color: props.mode === \"dark\" ? \"white\" : \"#042743\",\r\n            }}\r\n            id=\"myBox\"\r\n            rows=\"8\"\r\n          ></textarea>\r\n        </div>\r\n        {/* <div className=\"container\"> */}\r\n          <button className=\"btn btn-primary mx-1 my-2\" onClick={handleUpClick}>\r\n            Convert to Uppercase\r\n          </button>\r\n          <button className=\"btn btn-primary mx-1 my-2\" onClick={handleLoClick}>\r\n            Convert to Lowercase\r\n          </button>\r\n          <button className=\"btn btn-primary mx-1\" onClick={handleClearClick}>\r\n            Clear Text\r\n          </button>\r\n          <button className=\"btn btn-primary mx-1\" onClick={handleCopy}>\r\n            Copy Text\r\n          </button>\r\n          <button className=\"btn btn-primary mx-1\" onClick={handleExtraSpaces}>\r\n            Remove Extra Spaces\r\n          </button>\r\n        {/* </div> */}\r\n      </div>\r\n      <div\r\n        className=\"container my-3\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"#042743\" }}\r\n      >\r\n        <h2>Your text summary</h2>\r\n        <p>\r\n          {text.split(\" \").length} words and {text.length} characters\r\n        </p>\r\n        {/* <p>{0.008 * text.split(\" \").length} Minutes read</p> */}\r\n        <h2>Preview</h2>\r\n        <p>\r\n          {text.length > 0\r\n            ? text\r\n            : \"Enter something in the textbox above to preview it here\"}\r\n        </p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n// import props\r\n\r\nexport default function Alert(props) {\r\n  const capitalize = (word) => {\r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  };\r\n  return (\r\n    props.alert && (\r\n      <div\r\n        className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n        role=\"alert\"\r\n      >\r\n        <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n        {/* <button\r\n          type=\"button\"\r\n          className=\"btn-close\"\r\n          data-bs-dismiss=\"alert\"\r\n          aria-label=\"close\"\r\n        ></button> */}\r\n      </div>\r\n    )\r\n  );\r\n}\r\n// export default Alert\r\n","import \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport React, { useState } from \"react\";\nimport Alert from \"./components/Alert\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\"); // Whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#042743\";\n      showAlert(\"Dark mode has been enabled\", \"success\");\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled\", \"success\");\n    }\n  };\n  return (\n    <>\n      {/* <Navbar title=\"TextUtils\" aboutText=\"About TextUtils\" /> */}\n      {/* <Navbar/> */}\n      <Navbar title=\"EditText\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        <TextForm\n          heading=\"Enter the text to analyze below\"\n          mode={mode}\n          showAlert={showAlert}\n        />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}